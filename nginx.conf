# ==============================================================================
#  _____             _____ ____  _____ _____    _____
# |     |___ ___ ___|  _  |    \|     |   __|  |   __|___ ___ _ _ ___ ___
# |  |  | . | -_|   |     |  |  | | | |__   |  |__   | -_|  _| | | -_|  _|
# |_____|  _|___|_|_|__|__|____/|_|_|_|_____|  |_____|___|_|  \_/|___|_|
#       |_|
#
# Configuration file to establish a REST interface with nginx and PostgreSQL.
# Tested with nginx 1.14 and PostgreSQL 10.7 on FreeBSD 12.
# ==============================================================================
# The following 3rd party modules are required:
#
#   * headers-more
#   * lua
#   * postgres
#   * set-misc
#
# ==============================================================================
# Date:     2019-03-27
# Author:   Philipp Engel
# GitHub:   https://github.com/dabamos/openadms-server/
# ==============================================================================
# Load modules required modules on FreeBSD. On Linux, you have to change the
# paths according to your set-up.
load_module "/usr/local/libexec/nginx/ndk_http_module.so";
load_module "/usr/local/libexec/nginx/ngx_http_lua_module.so";
load_module "/usr/local/libexec/nginx/ngx_http_headers_more_filter_module.so";
load_module "/usr/local/libexec/nginx/ngx_http_set_misc_module.so";

user                www;                        # User to run nginx process under.
worker_processes    1;                          # Number of worker processes.
error_log           /var/log/nginx/error.log;   # Path to log file (or /dev/null/).

events {
    worker_connections  1024;                   # Max. connections per worker.
}

http {
    include mime.types;

    charset             utf-8;
    default_type        application/json;
    access_log          /dev/null;
    keepalive_timeout   65;

    # Uncomment the following two lines to enables GZIP compression.
    #
    # gzip                on;
    # gzip_types          text/csv text/plain application/json application/xml;

    # PostgreSQL connection details. Change "localhost" to the IP address of
    # your database instance, if it is not running on the same host.
    upstream postgresql {
        postgres_server     localhost dbname=observations user=openadms-server password=secret;
        postgres_keepalive  max=200 overflow=reject;
    }

    # HTTP content type.
    map $content_type $input_type {
        application/json                    "json";
        application/x-www-form-urlencoded   "form";
        default                             "json";
    }

    # HTTP accept header.
    map $http_accept $output_format {
        default             "json";
        application/json    "json";
        text/csv            "csv";
    }

    server {
        listen       80;                # HTTP port.
        server_name  www.example.com;   # CHANGE TO YOUR SERVER NAME!

        # Serve the root directory /var/www/.
        location / {
            root     /var/www/;
            index    index.html index.htm;
        }

        # Uncomment the following lines if you run nginx in front of an Apache
        # CouchDB 2 database server with CORS enabled.
        #
        # Access Futon web interface:
        #     http://www.example.com/couchdb/_utils/
        location = /couchdb/ {
            rewrite     /couchdb/(.*) /$1 break;
            proxy_pass  http://localhost:5984;

            proxy_redirect   off;
            proxy_set_header "Host"                          $host;
            proxy_set_header "X-Forwarded-For"               $proxy_add_x_forwarded_for;
            proxy_set_header "Access-Control-Allow-Origin"  "$server_name";
            proxy_set_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, PUT, DELETE";
            proxy_set_header "Access-Control-Allow-Headers" "X-Requested-With, Accept, Content-Type, Origin";
        }

        # Stores time series data in JSON format. Protected with HTTP
        # BasicAuth.
        #
        # Example:
        #     https://localhost/api/v1/
        location ~ "^/api/v1/observations/$" {
            auth_basic              "Restricted";
            auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

            if ($request_method != POST) {
                return 405;
            }

            if ($input_type != "json") {
                return 405;
            }

            client_max_body_size    100k;
            client_body_buffer_size 100k;

            set $json "";

            rewrite_by_lua_block {
                ngx.req.read_body()
                ngx.var.json = ngx.req.get_body_data()
            }

            postgres_pass       postgresql;
            postgres_escape     $json;
            postgres_query      POST "INSERT INTO openadms.observations (data) VALUES ('$json')";
            postgres_rewrite    POST changes    201;
            postgres_rewrite    POST no_changes 204;
        }

        # Returns an array of all project ids. Protected with HTTP BasicAuth.
        #
        # Example:
        #     https://localhost/api/v1/projects/
        location ~ "^/api/v1/projects/$" {
            auth_basic              "Restricted";
            auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

            postgres_pass   postgresql;
            postgres_output text;

            if ($output_format = "json") {
                postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'pid'), '[]'::json) FROM openadms.observations";
                more_set_headers    "Content-Type: application/json";
            }

            if ($output_format = "csv") {
                postgres_query      GET "SELECT DISTINCT data->>'pid' FROM openadms.observations";
                more_set_headers    "Content-Type: text/csv";
            }
        }

        # Returns all node ids in given project. Protected with HTTP BasicAuth.
        #
        # Example:
        #     https://localhost/api/v1/projects/pid/nodes/
        location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/$" {
            auth_basic              "Restricted";
            auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

            postgres_pass   postgresql;
            postgres_output text;

            if ($output_format = "json") {
                postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'nid'), '[]'::json) FROM openadms.observations WHERE data->>'pid' = '$project_id'";
                more_set_headers    "Content-Type: application/json";
            }

            if ($output_format = "csv") {
                postgres_query      GET "SELECT DISTINCT data->>'nid' FROM openadms.observations WHERE data->>'pid' = '$project_id'";
                more_set_headers    "Content-Type: text/csv";
            }
        }

        # Returns all sensors of given sensor node. Protected with HTTP
        # BasicAuth.
        #
        # Example:
        #     https://localhost/api/v1/projects/pid/nodes/nid/sensors/
        location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/sensors/$" {
            auth_basic              "Restricted";
            auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

            postgres_pass       postgresql;
            postgres_output     text;

            if ($output_format = "json") {
                postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'sensorName'), '[]'::json) FROM openadms.observations WHERE data->>'pid' = '$project_id' AND data->>'nid' = '$node_id'";
                more_set_headers    "Content-Type: application/json";
            }

            if ($output_format = "csv") {
                postgres_query      GET "SELECT DISTINCT data->>'sensorName' FROM openadms.observations WHERE data->>'pid' = '$project_id' AND data->>'nid' = '$node_id'";
                more_set_headers    "Content-Type: text/csv";
            }
        }

        # Returns all targets of given sensor node. Protected with HTTP
        # BasicAuth.
        #
        # Example:
        #     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/
        location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/sensors/(?<sensor>[\w_-]{1,64})/targets/$" {
            auth_basic              "Restricted";
            auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

            postgres_pass       postgresql;
            postgres_output     text;

            if ($output_format = "json") {
                postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'target'), '[]'::json) FROM openadms.observations WHERE data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor'";
                more_set_headers    "Content-Type: application/json";
            }

            if ($output_format = "csv") {
                postgres_query      GET "SELECT DISTINCT data->>'target' FROM openadms.observations WHERE data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor'";
                more_set_headers    "Content-Type: text/csv";
            }
        }

        # Returns time series data of given target, with optional time span.
        # Timestamps are formatted in ISO 8601. Protected with HTTP BasicAuth.
        #
        # Example:
        #     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/P100/
        #     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/P101/?from=2018-11-05T11:50:00.000000+00:00&to=2019-11-05T11:54:00.000000+00:0/
        location ~ "^/api/v1/projects/(?<project_id>[\w-_]{1,64})/nodes/(?<node_id>[\w-_]{1,64})/sensors/(?<sensor>[\w-_]{1,64})/targets/(?<target>[\w-_]{1,64})/$" {
            auth_basic              "Restricted";
            auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

            # Optional arguments for time span.
            postgres_escape     $start  =$arg_start;
            postgres_escape     $end    =$arg_end;

            # Set default time span (1900 - 2200). Hopefully, this
            # file won't be used after year 2200.
            set_if_empty        $arg_start  1900;
            set_if_empty        $arg_end    2200;

            postgres_pass       postgresql;
            postgres_output     text;

            if ($output_format = "json") {
                postgres_query      GET  "SELECT COALESCE(json_agg(data), '[]'::json) FROM openadms.observations WHERE data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor' AND data->>'target' = '$target' AND (data->>'timestamp' BETWEEN '$arg_start' AND '$arg_end')";
                more_set_headers    "Content-Type: application/json";
            }

            if ($output_format = "csv") {
                postgres_query      GET "SELECT (SELECT concat_ws(',', data->>'timestamp', data->>'pid', data->>'nid', data->>'id', data->>'sensorName', data->>'target', string_agg(conc, ',')) FROM (SELECT concat_ws(',', key, string_agg(value, ',')) AS conc FROM (SELECT key, (jsonb_each_text(value)).value FROM jsonb_each(data->'responseSets')) AS x GROUP BY key) AS csv) AS csv FROM openadms.observations WHERE data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor' AND data->>'target' = '$target' AND (data->>'timestamp' BETWEEN '$arg_start' AND '$arg_end') AND (data->'responseSets' IS NOT NULL)";
                more_set_headers    "Content-Type: text/csv";
            }
        }

        # If you are running security/acme-client to obtain X.509 certificates
        # from Let's Encrypt you may want to serve a directory for the
        # challenge files.
        #
        # Change "alias" to the actual path.
        location ^~ /.well-known/acme-challenge/ {
            default_type   "text/plain";
            alias          /mnt/acme/;
            allow          all;
        }

        # The default error messages. Further ones can be added.
        error_page  404 @404_json;
        error_page  418 @418_json;
        error_page  500 @500_json;

        location @404_json {
            default_type application/json;
            return 404 '{ "error": "Not found." }';
        }

        location @405_json {
            default_type application/json;
            return 404 '{ "error": "Not allowed." }';
        }

        location @418_json {
            default_type application/json;
            return 418 '{ "error": "I\'m a teapot." }';
        }

        location @500_json {
            default_type application/json;
            return 500 '{ "error": "Internal server error." }';
        }
    }
}
