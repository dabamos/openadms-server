#  _______                     _______ _____  _______ _______
# |       |.-----.-----.-----.|   _   |     \|   |   |     __|
# |   -   ||  _  |  -__|     ||       |  --  |       |__     |
# |_______||   __|_____|__|__||___|___|_____/|__|_|__|_______|
#          |__|                                         Server
#
# This REST API provides the following end points:
#
# [GET]  /api/v1/
# [POST] /api/v1/heartbeats/
# [POST] /api/v1/logs/
# [GET]  /api/v1/logs/<id>/
# [POST] /api/v1/observations/
# [GET]  /api/v1/observations/<id>/
# [GET]  /api/v1/projects/
# [GET]  /api/v1/projects/<pid>/nodes/
# [GET]  /api/v1/projects/<pid>/nodes/<nid>/heartbeat/
# [GET]  /api/v1/projects/<pid>/nodes/<nid>/logs/
# [GET]  /api/v1/projects/<pid>/nodes/<nid>/sensors/
# [GET]  /api/v1/projects/<pid>/nodes/<nid>/sensors/<sensor>/targets/
# [GET]  /api/v1/projects/<pid>/nodes/<nid>/sensors/<sensor>/targets/<target>/ids/
# [GET]  /api/v1/projects/<pid>/nodes/<nid>/sensors/<sensor>/targets/<target>/observations/
#
# ==============================================================================
# Date:     2020-03-22
# Author:   Philipp Engel
# GitHub:   https://github.com/dabamos/openadms-server/
# ============================================================================== 

# Comment out the following lines if cross-origin resource sharing (CORS) is
# already enabled.
location ^~ "api/v1/" {
    auth_basic              "Restricted";
    auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

    if ($request_method = 'OPTIONS') {
        add_header 'Access-Control-Allow-Origin'   '*';
        add_header 'Access-Control-Allow-Methods'  'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers'  'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Max-Age'        1728000;
        add_header 'Content-Type'                  'text/plain; charset=utf-8';
        add_header 'Content-Length'                0;
        return 204;
    }
    if ($request_method = 'POST') {
        add_header 'Access-Control-Allow-Origin'   '*';
        add_header 'Access-Control-Allow-Methods'  'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers'  'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    }
    if ($request_method = 'GET') {
        add_header 'Access-Control-Allow-Origin'   '*';
        add_header 'Access-Control-Allow-Methods'  'GET, POST, OPTIONS';
        add_header 'Access-Control-Allow-Headers'  'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
        add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
    }
}

# Returns server information: server time, server uptime, PostgreSQL version.
# Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/
location ~ "^/api/v1/$" {
    postgres_pass       postgresql;
    postgres_output     text;

    postgres_query      GET "SELECT openadms.get_version_json()";
    more_set_headers    "Content-Type: application/json";
}

# Stores or updates a "heartbeat" or "ping". Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/heartbeats/
location ~ "^/api/v1/heartbeats/$" {
    real_ip_header          X-Real-IP;
    set_real_ip_from        0.0.0.0/0;

    if ($request_method != POST) { return 405; }
    if ($input_type != "form")   { return 405; }

    client_max_body_size    10k;
    client_body_buffer_size 10k;

    set $project_id "";
    set $node_id    "";
    set $freq       "";

    rewrite_by_lua_block {
        ngx.req.read_body()
        local args, err = ngx.req.get_post_args()
        ngx.var.project_id = args["pid"]
        ngx.var.node_id = args["nid"]
        ngx.var.freq = args["freq"]
    }

    postgres_escape $project_id;
    postgres_escape $node_id;
    postgres_escape $freq;

    if ($project_id = false) { return 405; }
    if ($node_id = false)    { return 405; }
    if ($freq = false)       { return 405; }

    postgres_pass       postgresql;
    postgres_query      POST "SELECT openadms.update_heartbeat('$project_id', '$node_id', '$freq', '$remote_addr')";
}

# Stores log messages. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/logs/
location ~ "^/api/v1/logs/$" {
    if ($request_method != POST) {
        return 405;
    }

    if ($input_type != "form") {
        return 405;
    }

    client_max_body_size    100k;
    client_body_buffer_size 100k;

    set $project_id "";
    set $node_id    "";
    set $dt         "";
    set $module     "";
    set $level      "";
    set $message    "";

    rewrite_by_lua_block {
        ngx.req.read_body()
        local args, err = ngx.req.get_post_args()
        ngx.var.project_id = args["pid"]
        ngx.var.node_id = args["nid"]
        ngx.var.dt = args["dt"]
        ngx.var.module = args["module"]
        ngx.var.level = args["level"]
        ngx.var.message = args["message"]
    }

    postgres_escape $project_id;
    postgres_escape $node_id;
    postgres_escape $dt;
    postgres_escape $module;
    postgres_escape $level;
    postgres_escape $message;

    if ($project_id = false) { return 405; }
    if ($node_id = false)    { return 405; }
    if ($dt = false)         { return 405; }
    if ($module = false)     { return 405; }
    if ($level = false)      { return 405; }
    if ($message = false)    { return 405; }

    postgres_pass       postgresql;
    postgres_query      POST "SELECT openadms.store_log('$project_id', '$node_id', '$dt', '$module', '$level', '$message')";
}

# Returns log message of given id. Protected by HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/logs/1/
location ~ "^/api/v1/logs/(?<log_id>[\d]{1,64})/$" {
    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_log_json('$log_id')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_log_csv('$log_id')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Stores time series data in JSON format. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/observations/
location ~ "^/api/v1/observations/$" {
    if ($request_method != POST) { return 405; }
    if ($input_type != "json")   { return 405; }

    client_max_body_size    100k;
    client_body_buffer_size 100k;

    set $json "";

    rewrite_by_lua_block {
        ngx.req.read_body()
        ngx.var.json = ngx.req.get_body_data()
    }

    postgres_escape $json;

    if ($json = false) { return 405; }

    postgres_pass       postgresql;
    postgres_query      POST "SELECT openadms.store_observation('$json')";
}

# Returns a single observation object of given id. Protected with HTTP
# BasicAuth.
#
# Example:
#     https://localhost/api/v1/observations/00ce160e5cbb49b9bc2ee6f243f87841/
location ~ "^/api/v1/observations/(?<obs_id>[\w-_]{1,64})/$" {
    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_observation_json('$obs_id')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_observation_csv('$obs_id')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns an array of all project ids. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/
location ~ "^/api/v1/projects/$" {
    postgres_pass   postgresql;
    postgres_output text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_project_ids_json()";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_project_ids_csv()";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns all node ids in given project. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/$" {
    postgres_pass   postgresql;
    postgres_output text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_sensor_node_ids_json('$project_id')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_sensor_node_ids_csv('$project_id')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns heartbeat data of given sensor node. Protected by HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/heartbeat/
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/heartbeat/$" {
    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_heartbeat_json('$project_id', '$node_id')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_heartbeat_csv('$project_id', '$node_id')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns log messages of given sensor node. Protected by HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/logs/?start=2018-11-05T11:50:00.000000+00:00&end=2019-11-05T11:54:00.000000+00:00
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/logs/$" {
    # Optional arguments for time span.
    postgres_escape $start  =$arg_start;
    postgres_escape $end    =$arg_end;

    # Set default time span (1900 - 2200). Hopefully, this
    # file won't be used after year 2200.
    set_if_empty    $arg_start  "1900-01-01T00:00:00+00";
    set_if_empty    $arg_end    "2200-12-31T00:00:00+00";

    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_logs_json('$project_id', '$node_id', '$arg_start', '$arg_end')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_logs_csv('$project_id', '$node_id', '$arg_start', '$arg_end')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns all sensors of given sensor node. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/sensors/$" {
    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_sensors_json('$project_id', '$node_id')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_sensors_csv('$project_id', '$node_id')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns all targets of given sensor node. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/sensors/(?<sensor>[\w_-]{1,64})/targets/$" {
    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_targets_json('$project_id', '$node_id', '$sensor')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_targets_csv('$project_id', '$node_id', '$sensor')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns an array of all observation ids of target. Protected with HTTP
# BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/P100/ids/
location ~ "^/api/v1/projects/(?<project_id>[\w-_]{1,64})/nodes/(?<node_id>[\w-_]{1,64})/sensors/(?<sensor>[\w-_]{1,64})/targets/(?<target>[\w-_]{1,64})/ids/$" {
    postgres_pass   postgresql;
    postgres_output text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_observations_ids_json('$project_id', '$node_id', '$sensor', '$target')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_observations_ids_csv('$project_id', '$node_id', '$sensor', '$target')";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns observations of given target by time range. Timestamps must be
# formatted in ISO 8601. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/P100/observations/
location ~ "^/api/v1/projects/(?<project_id>[\w-_]{1,64})/nodes/(?<node_id>[\w-_]{1,64})/sensors/(?<sensor>[\w-_]{1,64})/targets/(?<target>[\w-_]{1,64})/observations/$" {
    # Optional arguments for time span.
    postgres_escape $start  =$arg_start;
    postgres_escape $end    =$arg_end;

    # Set default time span (1900 - 2200). Hopefully, this
    # file won't be used after year 2200.
    set_if_empty    $arg_start  "1900-01-01T00:00";
    set_if_empty    $arg_end    "2200-12-31T00:00";

    postgres_pass   postgresql;
    postgres_output text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT openadms.get_observations_json('$project_id', '$node_id', '$sensor', '$target', '$arg_start', '$arg_end')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT openadms.get_observations_csv('$project_id', '$node_id', '$sensor', '$target', '$arg_start', '$arg_end')";
        more_set_headers    "Content-Type: text/csv";
    }
}
