# Stores time series data in JSON format. Protected with HTTP
# BasicAuth.
#
# Example:
#     https://localhost/api/v1/
location ~ "^/api/v1/timeseries/$" {
    auth_basic              "Restricted";
    auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

    if ($request_method != POST) {
        return 405;
    }

    if ($input_type != "json") {
        return 405;
    }

    client_max_body_size    100k;
    client_body_buffer_size 100k;

    set $json "";

    rewrite_by_lua_block {
        ngx.req.read_body()
        ngx.var.json = ngx.req.get_body_data()
    }

    postgres_pass       postgresql;
    postgres_escape     $json;
    postgres_query      POST "INSERT INTO openadms.timeseries (data) VALUES ('$json')";
    postgres_rewrite    POST changes    201;
    postgres_rewrite    POST no_changes 204;
}

# Returns an array of all project ids. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/
location ~ "^/api/v1/projects/$" {
    auth_basic              "Restricted";
    auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

    postgres_pass   postgresql;
    postgres_output text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'pid'), '[]'::json) FROM openadms.timeseries WHERE data->>'type' = 'observation'";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT DISTINCT data->>'pid' FROM openadms.timeseries WHERE data->>'type' = 'observation'";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns all node ids in given project. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/$" {
    auth_basic              "Restricted";
    auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

    postgres_pass   postgresql;
    postgres_output text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'nid'), '[]'::json) FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id'";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT DISTINCT data->>'nid' FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id'";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns all sensors of given sensor node. Protected with HTTP
# BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/sensors/$" {
    auth_basic              "Restricted";
    auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'sensorName'), '[]'::json) FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id' AND data->>'nid' = '$node_id'";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT DISTINCT data->>'sensorName' FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id' AND data->>'nid' = '$node_id'";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns all targets of given sensor node. Protected with HTTP
# BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/
location ~ "^/api/v1/projects/(?<project_id>[\w_-]{1,64})/nodes/(?<node_id>[\w_-]{1,64})/sensors/(?<sensor>[\w_-]{1,64})/targets/$" {
    auth_basic              "Restricted";
    auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET "SELECT COALESCE(json_agg(DISTINCT data->>'target'), '[]'::json) FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor'";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT DISTINCT data->>'target' FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor'";
        more_set_headers    "Content-Type: text/csv";
    }
}

# Returns time series data of given target, with optional time span.
# Timestamps are formatted in ISO 8601. Protected with HTTP BasicAuth.
#
# Example:
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/P100/
#     https://localhost/api/v1/projects/pid/nodes/nid/sensors/totalstation/targets/P101/?from=2018-11-05T11:50:00.000000+00:00&to=2019-11-05T11:54:00.000000+00:0/
location ~ "^/api/v1/projects/(?<project_id>[\w-_]{1,64})/nodes/(?<node_id>[\w-_]{1,64})/sensors/(?<sensor>[\w-_]{1,64})/targets/(?<target>[\w-_]{1,64})/$" {
    auth_basic              "Restricted";
    auth_basic_user_file    /usr/local/etc/nginx/.htpasswd;

    # Optional arguments for time span.
    postgres_escape     $start  =$arg_start;
    postgres_escape     $end    =$arg_end;

    # Set default time span (1900 - 2200). Hopefully, this
    # file won't be used after year 2200.
    set_if_empty        $arg_start  1900;
    set_if_empty        $arg_end    2200;

    postgres_pass       postgresql;
    postgres_output     text;

    if ($output_format = "json") {
        postgres_query      GET  "SELECT COALESCE(json_agg(data), '[]'::json) FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor' AND data->>'target' = '$target' AND (data->>'timestamp' BETWEEN '$arg_start' AND '$arg_end')";
        more_set_headers    "Content-Type: application/json";
    }

    if ($output_format = "csv") {
        postgres_query      GET "SELECT (SELECT concat_ws(',', data->>'timestamp', data->>'pid', data->>'nid', data->>'id', data->>'sensorName', data->>'target', string_agg(conc, ',')) FROM (SELECT concat_ws(',', key, string_agg(value, ',')) AS conc FROM (SELECT key, (jsonb_each_text(value)).value FROM jsonb_each(data->'responseSets')) AS x GROUP BY key) AS csv) AS csv FROM openadms.timeseries WHERE data->>'type' = 'observation' AND data->>'pid' = '$project_id' AND data->>'nid' = '$node_id' AND data->>'sensorName' = '$sensor' AND data->>'target' = '$target' AND (data->>'timestamp' BETWEEN '$arg_start' AND '$arg_end') AND (data->'responseSets' IS NOT NULL)";
        more_set_headers    "Content-Type: text/csv";
    }
}
